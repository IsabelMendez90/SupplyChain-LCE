import streamlit as st
import openai
import markdown2  
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.enums import TA_LEFT
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from datetime import datetime

#  **Rol Correcto del Chatbot (Solo para uso interno)** 
INSTRUCCIONES_SISTEMA = """
Eres "Challenge Mentor AI", un asistente dise√±ado para ayudar a estudiantes de Mecatr√≥nica en el modelo TEC21
a definir su reto dentro del enfoque de Challenge-Based Learning (CBL). Debes hacer preguntas estructuradas
para guiar a los alumnos en la identificaci√≥n de su contexto, problem√°tica y propuesta de soluci√≥n.
A continuaci√≥n se definen los elementos que se integran en el marco propuesto por Apple para el Aprendizaje Basado en Retos (CBL) en la etapa de Engage:
‚Ä¢ Idea general: Es un concepto amplio que puede ser explorado en m√∫ltiples formas, es atractivo, de importancia para los estudiantes y para la sociedad. Es un t√≥pico con significancia global, por ejemplo la
biodiversidad, la salud, la guerra, la sostenibilidad, la democracia o la resiliencia. A Big Idea is a broad theme or concept presenting multiple possibilities for exploration and is important in the student‚Äôs context and the socio formador. Examples of big ideas include Community, Relationships, Creativity, Health, Sustainability, and Democracy.
‚Ä¢ Pregunta esencial: Por su dise√±o, la idea general posibilita la generaci√≥n de una amplia variedad de preguntas. El proceso se va acotando hacia la pregunta esencial que refleja el inter√©s de los
estudiantes y las necesidades de la comunidad. Crea un enfoque m√°s espec√≠fico para la idea general y gu√≠a a los estudiantes hacia aspectos m√°s manejables del concepto global. By design, the big idea generates essential questions that reflect student interests and the socio formador‚Äôs needs (e.g. Why is this important to me? Where does this concept intersect with my world? etc.). At the end of the Essential Questioning process is identifying one Essential Question with contextual meaning.
‚Ä¢ Reto: Surge de la pregunta esencial, es articulado e implica a los estudiantes crear una soluci√≥n espec√≠fica que resultar√° en una acci√≥n concreta y significativa. El reto est√° enmarcado para abordar la
idea general y las preguntas esenciales con acciones locales. The challenge turns the essential question into a call to action to learn deeply about the subject. A challenge is actionable and builds excitement.
The Engage phase concludes with identifying a compelling and actionable Challenge statement.

Tus acciones deben ser las siguientes:

Existe un formato, llamado "Formato A" que se le pide a un equipo de alumnos de √∫ltimo semestre de la carrera de Ingenier√≠a en Mecatr√≥nica.
Es un Formato que sirve para dar de alta el proyecto que se llama "Formato de Alta de Reto Integrador" y este se compone de los siguientes elementos:
‚Ä¢ Nombre del reto
‚Ä¢ Tipo de reto: a) Reto de Desarrollo de productos/procesos/servicios automatizados; b) Reto de Investigaci√≥n relacionado con Mecatr√≥nica; c) Reto de Emprendimiento tecnol√≥gico relacionados con Mecatr√≥nica
‚Ä¢ Socio Formador
‚Ä¢ Breve descripci√≥n general del reto, que consiste en responder lo siguiente: a) problem√°tica por resolver (¬øqu√©?); b) contexto y justificaci√≥n de la problem√°tica (¬øpor qu√©?); c) primeras ideas de soluci√≥n visualizada por el socio (¬øc√≥mo?); d) resultados y alcances esperados; e) posibles obst√°culos visualizados para lograr objetivos.

Tu prop√≥sito como Challenge Mentor AI:
‚Ä¢ Recibir de los alumnos del CBL la "Idea general", que pertence al Formato A, por lo que recibir√°s el nombre del reto, tipo de reto, socio formador, breve descripci√≥n general del reto.
‚Ä¢ Debes guiar al alumno para que cuando no conteste todo, poco a poco le vayas sacando la informaci√≥n y orient√°ndolo a tener m√°s informaci√≥n sobre la "Idea general".
‚Ä¢ Cuando ya tengas claridad sobre la "Idea general", debes sugerirle tres "Preguntas esenciales" alineadas a su "Idea general".
‚Ä¢ Todos los alumnos deben cumplir con el perfil de especialistsa t√©ctnico, por lo que maneja la conversaci√≥n en precisi√≥n t√©cnica, normativas y est√°ndares industriales.
‚Ä¢ Dale una retroalimentaci√≥n al usuario despu√©s de que haya enviado un "üì¢ Dame una Retroalimentaci√≥n", y para ello sigue la fase Engage del CBL, primero recibe la "Idea general" y ya despu√©s prop√≥n las tres preguntas esenciales.
‚Ä¢ Usa frases motivadoras y estructuradas para guiar el proceso.
‚Ä¢ Si das un dato basado en conocimientos generales, ind√≠calo claramente sin mencionar autores o publicaciones espec√≠ficas.
‚Ä¢ Clasifica autom√°ticamente al usuario en un perfil basado en sus respuestas, sin preguntarle directamente.
‚Ä¢ Adapta el tono seg√∫n el perfil: usa t√©rminos t√©cnicos para Especialistas, hip√≥tesis para Investigadores, y mercado para Emprendedores de prueba de concepto y Emprendedores de prototipo comercial.
‚Ä¢ Hata que los alumnos lo soliciten, brida las opciones de reto acorde a las "preguntas esenciales".

No hacer:
‚Ä¢ No les des la pregunta hasta que el estudiante haya ingresado los elementos de "Idea general".
‚Ä¢ Si el usuario pide una referencia, responde con: "No tengo acceso a bases de datos acad√©micas en tiempo real. Te sugiero buscar en fuentes como Google Scholar, IEEE Xplore, o Scopus."
‚Ä¢ No generes referencias falsas ni n√∫meros de DOI ficticios.
‚Ä¢ No proporciones referencias a art√≠culos, DOIs, p√°ginas web, normativas o autores espec√≠ficos a menos que el usuario haya ingresado una fuente verificada.
‚Ä¢ No les des el reto del "ENGAGE"
"""

# Leer la API Key desde Streamlit Secrets
API_KEY = st.secrets["OPENROUTER_API_KEY"]
API_BASE = "https://openrouter.ai/api/v1"
MODEL_NAME = "deepseek/deepseek-r1:free"

#  Funci√≥n para obtener respuesta del chatbot
def obtener_respuesta_chat(messages):
    client = openai.OpenAI(
        api_key=API_KEY,
        base_url=API_BASE
    )
    completion = client.chat.completions.create(
        model=MODEL_NAME,
        messages=[{"role": "system", "content": INSTRUCCIONES_SISTEMA}] + messages
    )
    respuesta = completion.choices[0].message.content

    # Verificar si la respuesta contiene referencias falsas y eliminarlas
    if "DOI" in respuesta or "et al." in respuesta or "gov.mx" in respuesta or "10." in respuesta:
        return "La informaci√≥n proporcionada debe verificarse en bases de datos acad√©micas. Sin embargo, bas√°ndonos en tu contexto, aqu√≠ hay un an√°lisis: " + respuesta

    return respuesta


#  Inicializar historial de mensajes y estado si no existen
if "messages" not in st.session_state:
    st.session_state.messages = []

if "responses" not in st.session_state:
    st.session_state.responses = {}

if "retroalimentacion_completada" not in st.session_state:
    st.session_state.retroalimentacion_completada = False

if "interacciones_chat" not in st.session_state:
    st.session_state.interacciones_chat = 0

#  T√≠tulo e introducci√≥n
st.title("ü§ñ Challenge Mentor AI")
st.markdown(
    "Creadores: Dra. J. Isabel M√©ndez Gardu√±o & M.Sc. Miguel de J. Ram√≠rez C., CMfgT ")
st.subheader("Gu√≠a interactiva para definir tu reto en el modelo TEC21 de Mecatr√≥nica.")
st.markdown(
    "Este asistente te ayudar√° paso a paso a estructurar tu reto dentro del enfoque de **Challenge-Based Learning (CBL)**. "
    "Recibir√°s **PREGUNTAS ESENCIALES** para que propongas tu reto.")

#  Formulario para capturar informaci√≥n del usuario
with st.form("challenge_form"):
    nombre_proyecto = st.text_input("üìå Nombre del Proyecto")
    tipo_proyecto = st.selectbox(
        "‚öôÔ∏è Tipo de Reto",
        ["Reto de Desarrollo de productos/procesos/servicios automatizados", "Reto de Investigaci√≥n relacionado con Mecatr√≥nica", "Reto de Emprendimiento tecnol√≥gico relacionados con Mecatr√≥nica - Prueba de concepto", "Reto de Emprendimiento tecnol√≥gico relacionados con Mecatr√≥nica - Prototipo comercial"]
    )
    perfil_usuario = st.selectbox(
        "üë§ Perfil del Usuario",
        ["Innovador/a", "Emprendedor/a", "Investigador/a", "Solucionador/a"]
    )
    socio_formador = st.text_input("üë• Socio Formador o Cliente (SIEMENS, Rockwell, emprendimiento, etc.)")
    contexto = st.text_area("üåç PROBLEM√ÅTICA POR RESOLVER (¬øQU√â?)")
    problema = st.text_area("üö® CONTEXTO Y JUSTIFICACI√ìN DE LA PROBLEM√ÅTICA (¬øPOR QU√â?)")
    impacto = st.text_area("üéØ PRIMERAS IDEAS DE SOLUCI√ìN VISUALIZADA POR EL SOCIO (¬øCOMO?)")
    propuesta_solucion = st.text_area("üí° RESULTADOS Y ALCANCES ESPERADOS")
    posibles_obstaculos = st.text_area("üöß POSIBLES OBST√ÅCULOS VISUALIZADOS PARA LOGRAR LOS OBJETIVOS")

    submit_button = st.form_submit_button("üì¢ Dame una Retroalimentaci√≥n")

#  Procesar informaci√≥n del formulario
if submit_button:
    if not nombre_proyecto or not contexto or not problema or not propuesta_solucion:
        st.warning("‚ö†Ô∏è Completa todos los campos antes de continuar.")
    else:
        st.session_state.responses = {
            "üìå Nombre del Proyecto": nombre_proyecto,
            "‚öôÔ∏è Tipo de Reto": tipo_proyecto,
            "üë§ Perfil del Usuario": perfil_usuario,
            "üë• Socio Formador o Cliente": socio_formador,
            "üåç PROBLEM√ÅTICA POR RESOLVER (¬øQU√â?)": contexto,
            "‚ùå CONTEXTO Y JUSTIFICACI√ìN DE LA PROBLEM√ÅTICA (¬øPOR QU√â?)": problema,
            "üéØ PRIMERAS IDEAS DE SOLUCI√ìN VISUALIZADA POR EL SOCIO (¬øCOMO?)": impacto,
            "üí° RESULTADOS Y ALCANCES ESPERADOS": propuesta_solucion,
            "üöß POSIBLES OBST√ÅCULOS VISUALIZADOS PARA LOGRAR LOS OBJETIVOS": posibles_obstaculos,
                       
        }

        user_message = "\n".join([f"**{key}:** {value}" for key, value in st.session_state.responses.items()])
        st.session_state.messages.append({"role": "user", "content": user_message})

        with st.spinner("üì¢ Generando retroalimentaci√≥n..."):
            respuesta_chatbot = obtener_respuesta_chat(st.session_state.messages)

        st.session_state.messages.append({"role": "assistant", "content": respuesta_chatbot})
        st.session_state.retroalimentacion_completada = True
        st.rerun()

#  Mostrar historial de conversaci√≥n
if st.session_state.retroalimentacion_completada:
    st.subheader("üìù Historial de Conversaci√≥n")
    for msg in st.session_state.messages:
        if msg["role"] == "user":
            st.markdown(f"üë®‚Äçüéì **T√∫:** {msg['content']}")
        elif msg["role"] == "assistant":
            st.markdown(f"ü§ñ **Challenge Mentor AI:** {msg['content']}")

    user_input = st.text_area("üí¨ Escribe aqu√≠ tu pregunta:", height=100)

    if st.button("Enviar"):
        if user_input.strip():
            st.session_state.messages.append({"role": "user", "content": user_input})

            with st.spinner("ü§ñ Generando respuesta..."):
                chatbot_response = obtener_respuesta_chat(st.session_state.messages)

            st.session_state.messages.append({"role": "assistant", "content": chatbot_response})

            st.session_state.interacciones_chat += 1
            st.rerun()
        else:
            st.warning("‚ö†Ô∏è Por favor, escribe tu pregunta antes de enviar.")
st.markdown("‚ö†Ô∏è **Nota:** Este asistente no tiene acceso a bases de datos cient√≠ficas en tiempo real. Para obtener referencias confiables, consulta fuentes como [Google Scholar](https://scholar.google.com/), [IEEE Xplore](https://ieeexplore.ieee.org/), o [Scopus](https://www.scopus.com/).")

# --- Estilos PDF ---
styles = getSampleStyleSheet()
title_style = ParagraphStyle("Title", parent=styles["Title"], fontSize=16, spaceAfter=10, alignment=TA_LEFT, textColor="darkblue")
author_style = ParagraphStyle("Author", parent=styles["Normal"], fontSize=10, spaceAfter=8, alignment=TA_LEFT)
description_style = ParagraphStyle("Description", parent=styles["Normal"], fontSize=10, spaceAfter=12, leading=14, alignment=TA_LEFT)
subtitle_style = ParagraphStyle("Subtitle", parent=styles["Heading1"], fontSize=14, spaceAfter=10, alignment=TA_LEFT, textColor="darkblue")
text_style = ParagraphStyle("Text", parent=styles["Normal"], fontSize=10, spaceAfter=10, leading=14, alignment=TA_LEFT)

def markdown_to_paragraph(md_text, style=text_style):
    html_text = markdown2.markdown(md_text).replace("\n", "<br/>")
    return Paragraph(html_text, style)

# --- Generaci√≥n del PDF ---
pdf_buffer = BytesIO()
doc = SimpleDocTemplate(pdf_buffer, pagesize=letter)
content = [
    Paragraph("Challenge Mentor AI", title_style),
    Spacer(1, 5),
    Paragraph("Creado por Dra. J. Isabel M√©ndez Gardu√±o & M.Sc. Miguel de J. Ram√≠rez C., CMfgT", author_style),
    Spacer(1, 5),
    Paragraph("Gu√≠a interactiva para definir tu reto en el modelo TEC21 de Mecatr√≥nica...", description_style),
    Spacer(1, 10),
    Paragraph("Reporte de Conversaci√≥n - Challenge Mentor AI", subtitle_style),
    Spacer(1, 12)
]
for msg in st.session_state.messages:
    role = "üë®‚Äçüéì Usuario:" if msg["role"] == "user" else "ü§ñ Challenge Mentor AI:"
    content.append(markdown_to_paragraph(f"**{role}**\n\n{msg['content']}"))
    content.append(Spacer(1, 12))
doc.build(content)
pdf_buffer.seek(0)

# --- Generaci√≥n del Word ---
def generar_word(messages):
    doc = Document()
    doc.add_heading('Challenge Mentor AI', level=0)
    doc.add_paragraph("Creado por Dra. J. Isabel M√©ndez Gardu√±o & M.Sc. Miguel de J. Ram√≠rez C., CMfgT")
    doc.add_paragraph("Gu√≠a interactiva para definir tu reto en el modelo TEC21 de Mecatr√≥nica...")
    doc.add_heading("Reporte de Conversaci√≥n - Challenge Mentor AI", level=1)
    for msg in messages:
        role = "üë®‚Äçüéì Usuario:" if msg["role"] == "user" else "ü§ñ Challenge Mentor AI:"
        para = doc.add_paragraph()
        run = para.add_run(f"{role}\n{msg['content']}\n")
        run.font.size = Pt(11)
        para.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT
    word_buffer = BytesIO()
    doc.save(word_buffer)
    word_buffer.seek(0)
    return word_buffer

# --- Nombre din√°mico de archivo ---
fecha_hora_actual = datetime.now().strftime("%Y%m%d-%H%M")
nombre_archivo = f"{fecha_hora_actual}-Reporte_CBL"

# --- Botones de descarga ---
st.subheader("üìÑ Descargar Reportes")
st.download_button(
    label="üìÑ Descargar Reporte en PDF",
    data=pdf_buffer,
    file_name=f"{nombre_archivo}.pdf",
    mime="application/pdf"
)

word_buffer = generar_word(st.session_state.messages)
st.download_button(
    label="üìÑ Descargar Reporte en Word",
    data=word_buffer,
    file_name=f"{nombre_archivo}.docx",
    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
)
